#!/bin/bash

# Droe Language Installer
# Usage: curl -sSL https://droe.dev/install | sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ROE_HOME="$HOME/.droelang"
ROE_BIN="$ROE_HOME/bin"
ROE_VERSION="latest"
GITHUB_REPO="droe-lang/droe"

# Platform detection
detect_platform() {
    local os=$(uname -s | tr '[:upper:]' '[:lower:]')
    local arch=$(uname -m)
    
    case $os in
        darwin*) os="macos" ;;
        linux*) os="linux" ;;
        mingw*|msys*|cygwin*) os="windows" ;;
        *) 
            echo -e "${RED}Error: Unsupported operating system: $os${NC}"
            exit 1
            ;;
    esac
    
    case $arch in
        x86_64|amd64) arch="x64" ;;
        arm64|aarch64) arch="arm64" ;;
        *) 
            echo -e "${RED}Error: Unsupported architecture: $arch${NC}"
            exit 1
            ;;
    esac
    
    echo "${os}-${arch}"
}

# Print banner
print_banner() {
    echo -e "${BLUE}"
    echo "  ____            "
    echo " |  _ \ ___   ___ "
    echo " | |_) / _ \ / _ \\"
    echo " |  _ < (_) |  __/"
    echo " |_| \_\___/ \___|"
    echo -e "${NC}"
    echo -e "${GREEN}Droe Language Installer${NC}"
    echo "======================"
    echo
}

# Check dependencies
check_dependencies() {
    echo -e "${BLUE}Checking dependencies...${NC}"
    
    # Check for curl or wget
    if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
        echo -e "${RED}Error: curl or wget is required${NC}"
        exit 1
    fi
    
    # Check for tar
    if ! command -v tar >/dev/null 2>&1; then
        echo -e "${RED}Error: tar is required${NC}"
        exit 1
    fi
    
    # Check for Node.js (required for WebAssembly runtime)
    if ! command -v node >/dev/null 2>&1; then
        echo -e "${YELLOW}Warning: Node.js not found. Installing Node.js is recommended for running .droe files.${NC}"
        echo -e "${YELLOW}Visit https://nodejs.org/ to install Node.js${NC}"
        echo
    fi
    
    echo -e "${GREEN}âœ“ Dependencies check passed${NC}"
    echo
}

# Download file with fallback
download_file() {
    local url="$1"
    local output="$2"
    
    if command -v curl >/dev/null 2>&1; then
        curl -fsSL "$url" -o "$output"
    elif command -v wget >/dev/null 2>&1; then
        wget -q "$url" -O "$output"
    else
        echo -e "${RED}Error: No download tool available${NC}"
        exit 1
    fi
}

# Get latest release version
get_latest_version() {
    echo -e "${BLUE}Fetching latest version...${NC}" >&2
    
    local api_url="https://api.github.com/repos/$GITHUB_REPO/releases/latest"
    local version
    
    if command -v curl >/dev/null 2>&1; then
        version=$(curl -fsSL "$api_url" 2>/dev/null | grep '"tag_name":' | sed 's/.*"tag_name": *"\([^"]*\)".*/\1/')
    elif command -v wget >/dev/null 2>&1; then
        version=$(wget -qO- "$api_url" 2>/dev/null | grep '"tag_name":' | sed 's/.*"tag_name": *"\([^"]*\)".*/\1/')
    fi
    
    if [ -z "$version" ]; then
        echo -e "${YELLOW}No releases found, using main branch${NC}" >&2
        version="main"
    fi
    
    echo "$version"
}

# Install Droe
install_droe() {
    local platform=$(detect_platform)
    local version="$(get_latest_version)"

    if [ "$platform" = "windows-x64" ] || [ "$platform" = "windows-arm64" ]; then
        echo -e "${YELLOW}Windows detected. Automatic installation is not supported.${NC}"
        echo -e "${BLUE}Please follow these manual installation steps:${NC}"
        echo
        echo "1. Open PowerShell and create the installation directory:"
        echo -e "   ${GREEN}New-Item -ItemType Directory -Force -Path \"$HOME\.droelang\"${NC}"
        echo
        echo "2. Download the required files:"
        echo -e "   ${GREEN}Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/droe-lang/droe/main/droe' -OutFile \"$HOME\.droelang\droe\"${NC}"
        echo -e "   ${GREEN}Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/droe-lang/droe/main/run.js' -OutFile \"$HOME\.droelang\run.js\"${NC}"
        echo -e "   ${GREEN}Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/droe-lang/droe/main/compiler.tar.gz' -OutFile \"$HOME\.droelang\compiler.tar.gz\"${NC}"
        echo
        echo "3. Extract the compiler archive:"
        echo -e "   ${GREEN}tar -xzf \"$HOME\.droelang\compiler.tar.gz\" -C \"$HOME\.droelang\"${NC}"
        echo
        echo "4. Add Droe to your PATH (run in PowerShell):"
        echo -e "   ${GREEN}\"[System.Environment]::SetEnvironmentVariable('Path', \"$([System.Environment]::GetEnvironmentVariable('Path', 'User'));$HOME\.droelang\", 'User')\"${NC}"
        echo
        echo "5. Close and reopen your terminal to apply changes."
        echo
        exit 0
    fi

    echo -e "${BLUE}Installing Droe $version for $platform...${NC}"
    
    # Create directories
    mkdir -p "$ROE_HOME"
    mkdir -p "$ROE_BIN"
    
    # Determine download URL based on version
    local BASE_URL
    if [ "$version" = "main" ] || [ "$version" = "latest" ] || [ "$version" = "dev" ]; then
        # Use raw files from main branch when no release exists
        BASE_URL="https://raw.githubusercontent.com/$GITHUB_REPO/main"
    else
        # Use GitHub releases for tagged versions
        BASE_URL="https://github.com/$GITHUB_REPO/releases/download/$version"
    fi

    # Download and extract the compiler directory
    echo -e "${BLUE}Downloading Droe compiler module...${NC}"
    download_file "$BASE_URL/compiler.tar.gz" "$ROE_HOME/compiler.tar.gz"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to download compiler module.${NC}"
        exit 1
    fi

    echo -e "${BLUE}Extracting compiler...${NC}"
    tar -xzf "$ROE_HOME/compiler.tar.gz" -C "$ROE_HOME"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to extract compiler module.${NC}"
        exit 1
    fi
    rm "$ROE_HOME/compiler.tar.gz"
    echo -e "${GREEN}âœ“ Compiler module installed successfully.${NC}"

    # Download the main droe CLI script
    echo -e "${BLUE}Downloading Droe CLI...${NC}"
    download_file "$BASE_URL/droe" "$ROE_HOME/droe"
    if [ $? -ne 0 ] || [ ! -f "$ROE_HOME/droe" ]; then
        echo -e "${RED}Error: Failed to download droe CLI. Aborting installation.${NC}" >&2
        exit 1
    fi
    chmod +x "$ROE_HOME/droe"
    
    # Create symlink in bin directory
    ln -sf "$ROE_HOME/droe" "$ROE_BIN/droe"
    echo -e "${GREEN}âœ“ Droe CLI installed successfully.${NC}"

    # Download the Node.js runtime for WebAssembly execution
    echo -e "${BLUE}Downloading Droe runtime...${NC}"
    if [ "$version" = "main" ]; then
        download_file "$BASE_URL/run.js" "$ROE_HOME/run.js"
    else
        download_file "$BASE_URL/run.js" "$ROE_HOME/run.js"
    fi
    if [ $? -ne 0 ] || [ ! -f "$ROE_HOME/run.js" ]; then
        echo -e "${YELLOW}Warning: Failed to download Node.js runtime. You may not be able to run .droe files directly.${NC}"
    else
        echo -e "${GREEN}âœ“ Droe runtime installed successfully.${NC}"
    fi
    
    echo -e "${GREEN}âœ“ Droe installed to $ROE_HOME${NC}"
    echo
}

# Update shell profile
update_shell_profile() {
    echo -e "${BLUE}Updating shell profile...${NC}"
    
    local shell_profile=""
    local shell_name=$(basename "$SHELL")
    
    case $shell_name in
        bash)
            if [ -f "$HOME/.bashrc" ]; then
                shell_profile="$HOME/.bashrc"
            elif [ -f "$HOME/.bash_profile" ]; then
                shell_profile="$HOME/.bash_profile"
            fi
            ;;
        zsh)
            shell_profile="$HOME/.zshrc"
            ;;
        fish)
            shell_profile="$HOME/.config/fish/config.fish"
            ;;
        *)
            echo -e "${YELLOW}Warning: Unknown shell $shell_name${NC}"
            ;;
    esac
    
    if [ -n "$shell_profile" ] && [ -f "$shell_profile" ]; then
        # Check if PATH is already updated
        if ! grep -q "$ROE_BIN" "$shell_profile" 2>/dev/null; then
            echo "" >> "$shell_profile"
            echo "# Droe Language" >> "$shell_profile"
            echo "export PATH=\"$ROE_BIN:\$PATH\"" >> "$shell_profile"
            echo -e "${GREEN}âœ“ Updated $shell_profile${NC}"
        else
            echo -e "${GREEN}âœ“ PATH already configured in $shell_profile${NC}"
        fi
    else
        echo -e "${YELLOW}Warning: Could not find shell profile to update${NC}"
        echo -e "${YELLOW}Please add $ROE_BIN to your PATH manually${NC}"
    fi
    
    echo
}

# Print completion message
print_completion() {
    echo -e "${GREEN}ðŸŽ‰ Droe installation completed!${NC}"
    echo
    echo -e "${BLUE}Next steps:${NC}"
    echo "1. Restart your terminal or run: source ~/.bashrc (or your shell profile)"
    echo "2. Verify installation: droe version"
    echo "3. Create your first project: droe init my-project"
    echo "4. Visit https://droe.dev/guide/ for documentation"
    echo
    echo -e "${BLUE}Quick start:${NC}"
    echo "  mkdir hello-droe && cd hello-droe"
    echo "  echo 'display \"Hello, Droe! ðŸ¦Œ\"' > hello.droe"
    echo "  droe run hello.droe"
    echo
    echo -e "${GREEN}Happy coding with Droe! ðŸ¦Œ${NC}"
}

# Main installation function
main() {
    print_banner
    check_dependencies
    install_droe
    update_shell_profile
    print_completion
}

# Error handling
trap 'echo -e "${RED}Installation failed!${NC}" >&2' ERR

# Run main function
main "$@"